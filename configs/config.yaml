openapi: 3.0.0
info:
  title: PC Configurator API
  version: '1.0.0'
  description: |
    API-сервис для управления конфигурациями ПК и агрегации цен из магазинов.

servers:
  - url: /api/v1

tags:
  - name: Auth
    description: Методы аутентификации/авторизации
  - name: Configurator
    description: Методы по работе с конфигурациями ПК
  - name: Aggregator
    description: Методы для агрегации предложений магазинов
  - name: Notifications
    description: Методы для уведомлений

paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Регистрация пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Успешная регистрация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Неверный запрос (валидация)
        '409':
          description: Пользователь уже существует

  /auth/login:
    post:
      tags:
        - Auth
      summary: Логин пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Успешный логин
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Неверные учётные данные

  /auth/refresh:
    post:
      tags:
        - Auth
      summary: Обновление токена
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: Выдача нового accessToken/refreshToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Ошибка валидации или невалидный refresh-токен

  /auth/me:
    get:
      tags:
        - Auth
      summary: Информация о текущем пользователе
      responses:
        '200':
          description: Данные о текущем пользователе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Не авторизован
          
  /auth/forgot_password:
    post:
      tags:
        - Auth
      summary: Запрос на сброс пароля (высылает ссылку по email)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        '200':
          description: Письмо с инструкциями отправлено (даже если email не найден)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "If that email is in our system, a reset link was sent."
        '400':
          description: Неверный формат запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/reset_password:
    post:
      tags:
        - Auth
      summary: Завершение сброса пароля по токену
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Пароль успешно сброшен
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password has been reset successfully."
        '400':
          description: Неверный формат запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Невалидный или просроченный reset_token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/verify_email:
    post:
      tags:
        - Auth
      summary: Подтверждение e-mail по коду
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
      responses:
        '200':
          description: Email успешно подтверждён
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email verified successfully."
        '400':
          description: Неверный формат запроса или неверный verification_code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags: [ Auth ]
      summary: Выход (удаление refresh‑token)
      security: [ { BearerAuth: [ ] } ]
      responses:
        '204': { description: Успешный выход }
        '401':
          description: Не авторизован
          content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }
        '500':
          description: Внутренняя ошибка
          content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }

  /auth/delete:
    delete:
      tags: [ Auth ]
      summary: Удаление аккаунта
      security: [ { BearerAuth: [ ] } ]
      responses:
        '204': { description: Аккаунт удалён }
        '401':
          description: Не авторизован
          content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }
        '500':
          description: Внутренняя ошибка
          content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }
  /config/components:
    get:
      tags: [ Configurator ]
      summary: Получить список компонентов
      description: >
        Возвращает компоненты указанной категории.  
        Дополнительно можно отфильтровать по бренду (`brand`) или по сценарию
        сборки (`usecase`).  
        Если указаны оба фильтра, применяется **AND**-логика.
        Если указан `search`, фильтры `category`, `brand`, `usecase` работают совместно c ним.
      parameters:
        - in: query
          name: category
          schema:
            type: string
            enum: [ cpu, gpu, motherboard, ram, hdd, ssd, cooler, case, psu ]
          required: false
          description: Категория компонента
        - in: query
          name: search
          schema:
            type: string
          required: false
          description: Подстрока названия
        - in: query
          name: brand
          required: false
          schema:
            type: string
          description: Название бренда (например «Seagate»)
        - in: query
          name: usecase
          required: false
          schema:
            type: string
          description: Сценарий сборки (например «office», «gaming»)
      responses:
        '200':
          description: Массив компонентов, удовлетворяющих фильтрам
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Component'
        '400':
          description: Ошибка валидации запроса
  /config/brands:
    get:
      tags: [ Configurator ]
      summary: Получить список брендов по категории
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: category
          required: true
          schema:
            type: string
            enum: [ cpu, gpu, motherboard, ram, hdd, ssd, cooler, case, psu ]
          description: Категория компонентов
      responses:
        '200':
          description: Массив названий брендов
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: Ошибка валидации запроса
  /config/compatible:
    post:
      tags:
        - Configurator
      summary: Получить список совместимых компонентов
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompatibleRequest'
      responses:
        '200':
          description: Список совместимых компонентов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Component'
        '400':
          description: Неверные данные запроса
  /config/usecases:
    get:
      tags:
        - Configurator
      summary: Получить список сценариев сборок
      responses:
        '200':
          description: Список сценариев
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  /config/usecase/{name}:
    get:
      tags:
        - Configurator
      summary: Получить готовые сборки(10штук) по сценарию
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Сборка для указанного сценария
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UseCase'
        '404':
          description: Сценарий не найден

  /config/newconfig:
    post:
      tags:
        - Configurator
      summary: Создать новую конфигурацию
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConfigRequest'
      responses:
        '201':
          description: Конфигурация успешно создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Configuration'
        '400':
          description: Ошибка валидации
        '401':
          description: Не авторизован

  /config/userconf:
    get:
      tags:
        - Configurator
      summary: Получить список конфигураций пользователя
      responses:
        '200':
          description: Список конфигураций
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Configuration'
        '401':
          description: Не авторизован

  /config/newconfig/{configId}:
    put:
      tags:
        - Configurator
      summary: Обновить конфигурацию
      parameters:
        - in: path
          name: configId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateConfigRequest'
      responses:
        '200':
          description: Конфигурация обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Configuration'
        '400':
          description: Ошибка валидации
        '401':
          description: Не авторизован
        '404':
          description: Конфигурация не найдена

    delete:
      tags:
        - Configurator
      summary: Удалить конфигурацию
      parameters:
        - in: path
          name: configId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Конфигурация успешно удалена
        '401':
          description: Не авторизован
        '403':
          description: Нет прав на удаление
        '404':
          description: Конфигурация не найдена

  /offers/min:
    get:
      tags:
        - Aggregator
      summary: Минимальная цена по компоненту
      parameters:
        - in: query
          name: componentId
          required: true
          schema:
            type: string
          description: ID компонента
      responses:
        '200':
          description: Минимальная цена по компоненту
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MinPriceResponse'
        '400':
          description: Ошибка валидации запроса

  /offers:
    get:
      tags:
        - Aggregator
      summary: Список предложений (оферт) по компоненту
      parameters:
        - in: query
          name: componentId
          schema:
            type: string
          required: true
          description: ID компонента
        - in: query
          name: sort
          schema:
            type: string
          description: Тип сортировки (priceAsc, priceDesc, rating)
      responses:
        '200':
          description: Массив предложений
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OffersResponse'
        '400':
          description: Ошибка валидации

  /offers/import/:
    post:
      tags:
        - Aggregator
      summary: Импорт прайс-листа из Excel
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '204':
          description: Прайс-лист успешно импортирован
        '400':
          description: Некорректный запрос или неверный формат файла
        '500':
          description: Ошибка сервера

  /notifications:
    get:
      tags:
        - Notifications
      summary: Получить список уведомлений пользователя
      description: Возвращает все уведомления (с пагинацией)
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Номер страницы
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 20
          description: Размер страницы
      responses:
        '200':
          description: Список уведомлений
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'
                  total:
                    type: integer
                    description: Общее число уведомлений
                  page:
                    type: integer
                  pageSize:
                    type: integer

  /notifications/unread-count:
    get:
      tags:
        - Notifications
      summary: Получить количество непрочитанных уведомлений
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Количество непрочитанных уведомлений
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: Число непрочитанных уведомлений

  /notifications/{notificationId}/read:
    post:
      tags:
        - Notifications
      summary: Отметить одно уведомление как прочитанное
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: notificationId
          required: true
          schema:
            type: string
          description: ID уведомления
      responses:
        '204':
          description: Уведомление успешно отмечено как прочитанное
        '404':
          description: Уведомление не найдено
  /subscriptions:
    post:
      tags: [ Subscriptions ]
      summary: Подписаться на компонент
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscribeRequest'
      responses:
        '204':
          description: Подписка создана
        '400':
          description: Некорректные данные
        '401':
          description: Не авторизован

    get:
      tags: [ Subscriptions ]
      summary: Список подписок пользователя
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Массив componentId
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string      # componentId
        '401':
          description: Не авторизован
  /subscriptions/{componentId}:
    delete:
      tags: [ Subscriptions ]
      summary: Отписаться от компонента
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: componentId
          required: true
          schema:
            type: string
          description: ID компонента
      responses:
        '204':
          description: Подписка удалена
        '401':
          description: Не авторизован
        '404':
          description: Подписка не найдена
  /subscriptions/status:
    get:
      tags: [ Subscriptions ]
      summary: Проверить список компонент на подписку
      security: [ BearerAuth: [ ] ]
      parameters:
        - in: query
          name: ids
          schema:
            type: string
            example: "1,2,3"
          required: true
          description: Список componentId через запятую (≤ 200)
      responses:
        '200':
          description: Map id → subscribed
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: boolean
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        name:
          type: string
      required:
        - email
        - password
    UseCase:
      type: object
      properties:
        name:
          type: string
          description: Название сборки (например, «Бюджетная сборка»)
        components:
          type: array
          items:
            $ref: '#/components/schemas/Component'
      required:
        - name
        - components
    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password

    RefreshRequest:
      type: object
      properties:
        refreshToken:
          type: string
      required:
        - refreshToken

    AuthResponse:
      type: object
      properties:
        user: { $ref: '#/components/schemas/User' }
        accessToken: { type: string }
        refreshToken: { type: string }
      required: [ accessToken ]

    ForgotPasswordRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "{{email}}"
      required:
        - email

    ResetPasswordRequest:
      type: object
      properties:
        reset_token:
          type: string
          example: "{{reset_token}}"
        new_password:
          type: string
          format: password
          example: "newpassword123"
      required:
        - reset_token
        - new_password

    VerifyEmailRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "{{email}}"
        verification_code:
          type: string
          example: "Dq0fTJtg"
      required:
        - email
        - verification_code

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        roles:
          type: array
          items:
            type: string

    Component:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        category:
          type: string
        brand:
          type: string
        specs:
          type: object
          additionalProperties: true

    CompatibleBase:
      type: object
      properties:
        category:
          type: string
          enum: [ cpu, gpu, motherboard, ram, hdd, ssd, cooler, case, psu ]
        name:
          type: string
      required: [ category, name ]

    CompatibleRequest:
      type: object
      required: [ category, bases ]
      properties:
        category:
          type: string
          enum: [ cpu, gpu, motherboard, ram, hdd, ssd, cooler, case, psu ]
        bases:
          type: array
          items:
            $ref: '#/components/schemas/CompatibleBase'
        brand:
          type: string
          description: Необязательный фильтр по бренду
        usecase:
          type: string
          description: Необязательный фильтр по сценарию

    CreateConfigRequest:
      type: object
      properties:
        name:
          type: string
        components:
          type: array
          items:
            $ref: '#/components/schemas/ComponentRef'
      required:
        - name
        - components

    UpdateConfigRequest:
      type: object
      properties:
        name:
          type: string
        components:
          type: array
          items:
            $ref: '#/components/schemas/ComponentRef'
      required:
        - components

    Configuration:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        ownerId:
          type: string
        components:
          type: array
          items:
            $ref: '#/components/schemas/ComponentRef'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ComponentRef:
      type: object
      properties:
        category:
          type: string
        componentId:
          type: string

    Offer:
      type: object
      properties:
        shopId:
          type: string
        shopName:
          type: string
        price:
          type: number
        currency:
          type: string
        availability:
          type: string
        url:
          type: string

    OffersResponse:
      type: object
      properties:
        componentId:
          type: string
        offers:
          type: array
          items:
            $ref: '#/components/schemas/Offer'

    ErrorResponse:
      type: object
      required: [ message, code ]
      properties:
        message: { type: string }
        code: { type: integer }

    Notification:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        title:
          type: string
        message:
          type: string
        isRead:
          type: boolean
        createdAt:
          type: string
          format: date-time
    SubscribeRequest:
      type: object
      properties:
        componentId:
          type: string
      required: [ componentId ]
    MinPriceResponse:
      type: object
      properties:
        componentId:
          type: string
        minPrice:
          type: number
        currency:
          type: string
        note:
          type: string
      required: [ componentId, minPrice, currency ]
